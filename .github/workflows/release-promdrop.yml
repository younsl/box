name: Release promdrop
run-name: Release promdrop ${{ github.ref_name }}

on:
  push:
    tags:
      - 'promdrop/[0-9]+.[0-9]+.[0-9]+'
  workflow_dispatch:
    inputs:
      version:
        description: "Semantic version to release (e.g. 1.0.0)"
        required: true
        default: "x.y.z"

jobs:
  extract-version:
    runs-on: ubuntu-24.04
    outputs:
      version: ${{ steps.get-version.outputs.version }}
    steps:
      - name: Extract version from tag or input
        id: get-version
        run: |
          if [ "${{ github.event_name }}" = "push" ]; then
            # Extract version from tag (promdrop/1.0.0 -> 1.0.0)
            VERSION="${GITHUB_REF#refs/tags/promdrop/}"
          else
            # Use manual input version
            VERSION="${{ inputs.version }}"
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Extracted version: ${VERSION}"

  build-binaries:
    needs: extract-version
    runs-on: ${{ matrix.os }}
    permissions:
      contents: read
    env:
      PROJECT_NAME: promdrop
      PROJECT_BASE_DIR: box/kubernetes/promdrop
      VERSION: ${{ needs.extract-version.outputs.version }}
    strategy:
      matrix:
        include:
          - os: ubuntu-24.04
            target: x86_64-unknown-linux-gnu
            platform: linux
            arch: amd64
          - os: ubuntu-24.04
            target: aarch64-unknown-linux-gnu
            platform: linux
            arch: arm64
          - os: macos-latest
            target: x86_64-apple-darwin
            platform: darwin
            arch: amd64
          - os: macos-latest
            target: aarch64-apple-darwin
            platform: darwin
            arch: arm64
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation tools (Linux ARM64)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
        env:
          DEBIAN_FRONTEND: noninteractive

      - name: Configure cross-compilation (Linux ARM64)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "CXX_aarch64_unknown_linux_gnu=aarch64-linux-gnu-g++" >> $GITHUB_ENV

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: ${{ env.PROJECT_BASE_DIR }}/target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

      - name: Build binary
        working-directory: ${{ env.PROJECT_BASE_DIR }}
        run: |
          echo "================================="
          echo "Building ${{ env.PROJECT_NAME }}"
          echo "Target: ${{ matrix.target }}"
          echo "Platform: ${{ matrix.platform }}"
          echo "Architecture: ${{ matrix.arch }}"
          echo "Version: ${{ env.VERSION }}"
          echo "================================="

          # Build with verbose output for debugging
          cargo build --release --target ${{ matrix.target }} --verbose

          # Define paths
          BINARY_NAME="${{ env.PROJECT_NAME }}-${{ matrix.platform }}-${{ matrix.arch }}"
          SOURCE_BINARY="target/${{ matrix.target }}/release/${{ env.PROJECT_NAME }}"

          # Verify binary was created
          if [ ! -f "${SOURCE_BINARY}" ]; then
            echo "❌ Error: Binary not found at ${SOURCE_BINARY}"
            echo "Contents of target/${{ matrix.target }}/release/:"
            ls -la target/${{ matrix.target }}/release/ || echo "Directory not found"
            exit 1
          fi

          # Copy and set permissions
          cp "${SOURCE_BINARY}" "${BINARY_NAME}"
          chmod +x "${BINARY_NAME}"

          echo "✓ Binary created: ${BINARY_NAME}"
          ls -lh "${BINARY_NAME}"

          # Basic smoke test
          echo "Running smoke test..."
          ./"${BINARY_NAME}" --version || echo "⚠️  Warning: Version check failed (may not work on this platform)"

      - name: Create archive
        working-directory: ${{ env.PROJECT_BASE_DIR }}
        run: |
          BINARY_NAME="${{ env.PROJECT_NAME }}-${{ matrix.platform }}-${{ matrix.arch }}"
          tar -czf "${BINARY_NAME}.tar.gz" "${BINARY_NAME}"
          echo "Created: ${BINARY_NAME}.tar.gz"
          ls -lh "${BINARY_NAME}.tar.gz"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PROJECT_NAME }}-${{ matrix.platform }}-${{ matrix.arch }}
          path: ${{ env.PROJECT_BASE_DIR }}/${{ env.PROJECT_NAME }}-${{ matrix.platform }}-${{ matrix.arch }}.tar.gz

  build-docker:
    needs: extract-version
    runs-on: ubuntu-24.04
    permissions:
      contents: read
      packages: write
    env:
      PROJECT_BASE_DIR: box/kubernetes/promdrop
      REGISTRY: ghcr.io
      IMAGE_NAME: younsl/promdrop
      VERSION: ${{ needs.extract-version.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ needs.extract-version.outputs.version }}
            type=raw,value=latest

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        env:
          IMAGE_DESCRIPTION: "Generates Prometheus relabel configs to drop unused metrics (Rust implementation)"
        with:
          context: ${{ env.PROJECT_BASE_DIR }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            VERSION=${{ env.VERSION }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  test:
    needs: extract-version
    runs-on: ubuntu-24.04
    permissions:
      contents: read
    env:
      PROJECT_BASE_DIR: box/kubernetes/promdrop
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: ${{ env.PROJECT_BASE_DIR }}/target
          key: ${{ runner.os }}-cargo-build-test-${{ hashFiles('**/Cargo.lock') }}

      - name: Run tests
        working-directory: ${{ env.PROJECT_BASE_DIR }}
        run: |
          cargo test --verbose
          cargo test --release --verbose

      - name: Run clippy
        working-directory: ${{ env.PROJECT_BASE_DIR }}
        run: cargo clippy -- -D warnings

      - name: Check formatting
        working-directory: ${{ env.PROJECT_BASE_DIR }}
        run: cargo fmt --check

  release:
    runs-on: ubuntu-24.04
    needs: [extract-version, build-binaries, build-docker, test]
    permissions:
      contents: write
    env:
      PROJECT_NAME: promdrop
      REGISTRY: ghcr.io
      IMAGE_NAME: younsl/promdrop
      VERSION: ${{ needs.extract-version.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Download binary artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          pattern: promdrop-*

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          find artifacts -name "*.tar.gz" -exec cp {} release-assets/ \;
          echo "Release assets:"
          ls -lh release-assets/

      - name: Generate checksums
        working-directory: release-assets
        run: |
          sha256sum *.tar.gz > checksums.txt
          cat checksums.txt

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: release-assets/*
          name: ${{ env.PROJECT_NAME }} ${{ env.VERSION }}
          body: |
            # ${{ env.PROJECT_NAME }} (Rust) ${{ env.VERSION }}

            Rust implementation of promdrop - generates Prometheus relabel configs to drop unused metrics.

            ## What's New

            This is the Rust port of promdrop with improved performance and memory efficiency.

            **Key improvements over Go version:**
            - Faster JSON parsing with serde
            - Lower memory footprint
            - Compile-time type safety
            - Zero-cost abstractions

            ## Installation

            ### Binary Installation

            Download the appropriate binary for your platform:

            | Platform | Architecture | Binary |
            |----------|--------------|--------|
            | Linux | amd64 | `${{ env.PROJECT_NAME }}-linux-amd64.tar.gz` |
            | Linux | arm64 | `${{ env.PROJECT_NAME }}-linux-arm64.tar.gz` |
            | macOS | amd64 (Intel) | `${{ env.PROJECT_NAME }}-darwin-amd64.tar.gz` |
            | macOS | arm64 (Apple Silicon) | `${{ env.PROJECT_NAME }}-darwin-arm64.tar.gz` |

            **Quick install** (auto-detects platform):

            ```bash
            # Detect platform
            ARCH=$(uname -m | sed 's/x86_64/amd64/;s/aarch64/arm64/')
            OS=$(uname -s | tr '[:upper:]' '[:lower:]')

            # Download and install
            curl -LO https://github.com/${{ github.repository }}/releases/download/${{ env.VERSION }}/${{ env.PROJECT_NAME }}-${OS}-${ARCH}.tar.gz
            tar -xzf ${{ env.PROJECT_NAME }}-${OS}-${ARCH}.tar.gz
            chmod +x ${{ env.PROJECT_NAME }}-${OS}-${ARCH}
            sudo mv ${{ env.PROJECT_NAME }}-${OS}-${ARCH} /usr/local/bin/${{ env.PROJECT_NAME }}

            # Verify installation
            ${{ env.PROJECT_NAME }} --version
            ```

            ### Container Image

            Available on [GitHub Container Registry](https://github.com/users/younsl/packages/container/package/${{ env.PROJECT_NAME }}) with multi-arch support:

            ```bash
            # Pull the image
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}

            # Run with your metrics file
            docker run --rm -v $(pwd):/data \
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }} \
              --file /data/prometheus-metrics.json
            ```

            ### From Source

            Requires Rust 1.70 or later:

            ```bash
            git clone https://github.com/${{ github.repository }}.git
            cd ${{ github.repository }}/${{ env.PROJECT_BASE_DIR }}
            cargo build --release
            ./target/release/${{ env.PROJECT_NAME }} --version
            ```

            ## Usage

            ```bash
            # Basic usage
            ${{ env.PROJECT_NAME }} --file prometheus-metrics.json

            # Custom output locations
            ${{ env.PROJECT_NAME }} --file prometheus-metrics.json \
              --txt-output-dir ./unused \
              --output combined_relabel_configs.yaml

            # Show help
            ${{ env.PROJECT_NAME }} --help
            ```

            ## Documentation

            - [Installation Guide](https://github.com/${{ github.repository }}/blob/main/${{ env.PROJECT_BASE_DIR }}/docs/installation.md)
            - [Usage Guide](https://github.com/${{ github.repository }}/blob/main/${{ env.PROJECT_BASE_DIR }}/docs/usage.md)
            - [Testing Guide](https://github.com/${{ github.repository }}/blob/main/${{ env.PROJECT_BASE_DIR }}/docs/testing.md)
            - [Output Configuration](https://github.com/${{ github.repository }}/blob/main/${{ env.PROJECT_BASE_DIR }}/docs/output-configuration.md)

            ## Checksums

            Verify your download with SHA256:

            ```
            $(cat release-assets/checksums.txt)
            ```
          generate_release_notes: true
          draft: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}
