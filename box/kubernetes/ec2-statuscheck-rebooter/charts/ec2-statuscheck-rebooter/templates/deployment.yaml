apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "ec2-statuscheck-rebooter.fullname" . }}
  labels:
    {{- include "ec2-statuscheck-rebooter.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  revisionHistoryLimit: {{ .Values.revisionHistoryLimit }}
  selector:
    matchLabels:
      {{- include "ec2-statuscheck-rebooter.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "ec2-statuscheck-rebooter.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "ec2-statuscheck-rebooter.serviceAccountName" . }}
      {{- if .Values.priorityClassName }}
      priorityClassName: {{ .Values.priorityClassName }}
      {{- end }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
      - name: {{ .Chart.Name }}
        securityContext:
          {{- toYaml .Values.securityContext | nindent 12 }}
        image: {{ include "ec2-statuscheck-rebooter.image" . }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        env:
        - name: CHECK_INTERVAL_SECONDS
          value: {{ .Values.rebooter.checkIntervalSeconds | quote }}
        - name: FAILURE_THRESHOLD
          value: {{ .Values.rebooter.failureThreshold | quote }}
        {{- if .Values.rebooter.region }}
        - name: AWS_REGION
          value: {{ .Values.rebooter.region | quote }}
        {{- end }}
        {{- if .Values.rebooter.tagFilters }}
        - name: TAG_FILTERS
          value: {{ join "," .Values.rebooter.tagFilters | quote }}
        {{- end }}
        - name: DRY_RUN
          value: {{ .Values.rebooter.dryRun | quote }}
        - name: LOG_FORMAT
          value: {{ .Values.rebooter.logFormat | quote }}
        - name: LOG_LEVEL
          value: {{ .Values.rebooter.logLevel | quote }}
        ports:
        - name: health
          containerPort: 8080
          protocol: TCP
        livenessProbe:
          httpGet:
            path: /healthz
            port: health
          initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
          failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
        readinessProbe:
          httpGet:
            path: /readyz
            port: health
          initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
          failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
        resources:
          {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
